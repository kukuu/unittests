Testing AngularJS Services from the Console


http://stackoverflow.com/questions/15527832/how-can-i-test-an-angularjs-service-from-the-console

2.  I have a service like:

angular.module('app').factory('ExampleService', function(){
  this.f1 = function(world){
    return 'Hello '+world;
  }
  return this;
})
I would like to test it from the JavaScript console and call the function f1() of the service.

How can I do that?

3. So I found out that you can not simply call angular.injector(['app']) if there already exists an injector. Because this function tries to create a new injector.

Instead you have to call injector = angular.element(document.body).injector()

From the retrieved injector you can then get whatever service you like with injector.get('ServiceName')

So in one line the command would look like this:

angular.element(document.body).injector().get('serviceName')


4.Another useful trick to get the $scope of a particular element. Select the element with the DOM inspection tool of your developer tools and then run the following line ($0 is always the selected element): 
angular.element($0).scope()

.........................

5.First of all, a modified version of your service.

a )

var app = angular.module('app',[]);

app.factory('ExampleService',function(){
    return {
        f1 : function(world){
            return 'Hello' + world;
        }
    };
});
This returns an object, nothing to new here.

Now the way to get this from the console is

B.)

var $inj = angular.injector(['app']);
var serv = $inj.get('ExampleService');
serv.f1("World");

This returns an ExampleService constructor which you will next have to do a 'new' on.

C) Or alternatively,

app.service('ExampleService',function(){
            this.f1 = function(world){
                return 'Hello' + world;
            };
    });
This returns new ExampleService() on injection.